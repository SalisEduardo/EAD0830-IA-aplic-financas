dplyr::summarise(peso=sum(peso))|>
dplyr::top_n(15,peso) |>
dplyr::pull(ativo)
harlesRiver |>
dplyr::filter(ativo %in% not_stocks == FALSE) |>
dplyr::mutate(ativo = ifelse(desc =='Investimento no Exterior',ativo,paste(ativo,".SA",sep='') ) ) |>
dplyr::group_by(ativo) |>
dplyr::summarise(peso=sum(peso))
charlesRiver |>
dplyr::filter(ativo %in% not_stocks == FALSE) |>
dplyr::mutate(ativo = ifelse(desc =='Investimento no Exterior',ativo,paste(ativo,".SA",sep='') ) ) |>
dplyr::group_by(ativo) |>
dplyr::summarise(peso=sum(peso))
charlesRiver |>
dplyr::filter(ativo %in% not_stocks == FALSE) |>
dplyr::mutate(ativo = ifelse(desc =='Investimento no Exterior',ativo,paste(ativo,".SA",sep='') ) ) |>
dplyr::group_by(ativo) |>
dplyr::summarise(peso=sum(peso))|>
dplyr::top_n(15,peso) |>
dplyr::pull(ativo)
stocks_CR <-  charlesRiver |>
dplyr::filter(ativo %in% not_stocks == FALSE) |>
dplyr::mutate(ativo = ifelse(desc =='Investimento no Exterior',ativo,paste(ativo,".SA",sep='') ) ) |>
dplyr::group_by(ativo) |>
dplyr::summarise(peso=sum(peso))|>
dplyr::top_n(15,peso) |>
dplyr::pull(ativo)
selected_tickers<- stocks_CR
getSymbols(selected_tickers, src = "yahoo", from ='2021-01-01', to='2023-05-31' ) # not run more than one time
start_date <- as.Date('2021-01-01')
end_date <- as.Date('2023-05-31')
getAdjustedClose <- function(symbol) {
getSymbols(symbol, from = start_date, to = end_date)
adjusted_close <- Ad(get(symbol))
return(adjusted_close)
}
# Retrieve Adjusted Close prices for each ticker
adjusted_close_list <- lapply(selected_tickers, getAdjustedClose)
stocks_prices <- do.call(cbind, adjusted_close_list)
colnames(stocks_prices) <- gsub("\\.SA.Adjusted$", "", colnames(stocks_prices))
stocks_daily_returns <- stocks_prices |>
PerformanceAnalytics::Return.calculate(method = 'log') |>
na.omit()
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
training_portfolio
view(training_portfolio)
colnames(stocks_prices) <- gsub("\\.Adjusted$", "", colnames(stocks_prices))
stocks_daily_returns <- stocks_prices |>
PerformanceAnalytics::Return.calculate(method = 'log') |>
na.omit()
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
training_portfolio
training_portfolio |> view()
maxret_specs <- portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0, max=1) |>
add.objective(type = "return", name = "mean")
maxret_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = markowitz_specs,
optimize_method = "ROI")
optimize.portfolio(R = training_portfolio,
portfolio = maxret_specs,
optimize_method = "ROI")
portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0, max=30) |>
add.objective(type = "return", name = "mean")
maxret_specs <- portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0, max=20) |>
add.objective(type = "return", name = "mean")
maxret_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = maxret_specs,
optimize_method = "ROI")
maxret_ROI
maxret_specs <- portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0, max=20) |>
add.objective(type = "return", name = "mean")
maxret_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = maxret_specs,
optimize_method = "ROI")
maxret_ROI
portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0, max=20) |>
add.objective(type = "return", name = "mean")
maxret_specs <- portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0, max=0.2) |>
add.objective(type = "return", name = "mean")
maxret_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = maxret_specs,
optimize_method = "ROI")
maxret_ROI
maxret_specs <- portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0.1, max=0.4) |>
add.objective(type = "return", name = "mean")
markowitz_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = markowitz_specs,
optimize_method = "ROI")
markowitz_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.objective(type = "return", name = "mean") |>
add.objective(type = "risk", name = "StdDev")
maxret_specs <- portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0.1, max=0.4) |>
add.objective(type = "return", name = "mean")
markowitz_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = markowitz_specs,
optimize_method = "ROI")
maxret_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = maxret_specs,
optimize_method = "ROI")
portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.constraint(type = "box", min=0.01, max=0.2) |>
add.objective(type = "return", name = "mean")
maxret_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = maxret_specs,
optimize_method = "ROI")
markowitz_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.objective(type = "return", name = "mean") |>
add.objective(type = "risk", name = "StdDev")
markowitz_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = markowitz_specs,
optimize_method = "ROI")
chart.EF.Weights(markowitz_ROI, n.portfolios = 30, type="mean-StdDev",
match.col = "StdDev")
training_portfolio
library(tidyverse)
library(dplyr)
library(readxl)
library(PerformanceAnalytics)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(PortfolioAnalytics)
library(quantmod)
# Composicao do IBOV no dia 2022-12-29 (investidor monatndo a carteira em janeiro de 2023)
core_ibov_tickers <- readxl::read_excel('COMDINHEIRO_IBOV29122023.xlsx') |>
dplyr::top_n(15,Peso) |>
dplyr::mutate(Ticker = paste(Ticker,'.SA',sep='')) |>
dplyr::pull(Ticker)
charlesRiver <-readxl::read_excel("COMDINHEIRO_carteira_charlesRiverJan2023.xlsx")
colnames(charlesRiver) <- c('ativo','desc','compras','vendas','final','peso')
view(charlesRiver)
not_stocks <- c("Investimento no Exterior",'CONTA CORRENTE NO EXTERIOR','VALORES A PAGAR','VALORES A RECEBER','NTNB_10012018_15082028')
stocks_CR <-  charlesRiver |>
dplyr::filter(ativo %in% not_stocks == FALSE) |>
dplyr::mutate(ativo = ifelse(desc =='Investimento no Exterior',ativo,paste(ativo,".SA",sep='') ) ) |>
dplyr::group_by(ativo) |>
dplyr::summarise(peso=sum(peso))|>
dplyr::top_n(15,peso) |>
dplyr::pull(ativo)
selected_tickers<- stocks_CR
getSymbols(selected_tickers, src = "yahoo", from ='2021-01-01', to='2023-05-31' ) # not run more than one time
start_date <- as.Date('2021-01-01')
end_date <- as.Date('2023-05-31')
getAdjustedClose <- function(symbol) {
getSymbols(symbol, from = start_date, to = end_date)
adjusted_close <- Ad(get(symbol))
return(adjusted_close)
}
# Retrieve Adjusted Close prices for each ticker
adjusted_close_list <- lapply(selected_tickers, getAdjustedClose)
stocks_prices <- do.call(cbind, adjusted_close_list)
colnames(stocks_prices) <- gsub("\\.SA.Adjusted$", "", colnames(stocks_prices))
colnames(stocks_prices) <- gsub("\\.Adjusted$", "", colnames(stocks_prices))
stocks_daily_returns <- stocks_prices |>
PerformanceAnalytics::Return.calculate(method = 'log') |>
na.omit()
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
# Invest all capital, Shot allowed , minimize standard deviation and maximize return
mvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
mvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = markowitz_specs,
optimize_method = "ROI")
mvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = mvp_specs,
optimize_method = "ROI")
mvp_ROI
currency_pair <- "USD/BRL"
getSymbols(currency_pair, src = "yahoo", from = start_date, to = end_date)
currency_pair <- "USD/BRL=X"
getSymbols(currency_pair, src = "yahoo", from = start_date, to = end_date)
currency_pair <- "USDBRL=X"
getSymbols(currency_pair, src = "yahoo", from = start_date, to = end_date)
exchange_rates <- Cl(get(currency_pair))
exchange_rate_returns <- dailyReturn(exchange_rates, type = "log")
exchange_rate_returns |>head()
stocks_prices |> head()
exchange_rate_returns[1:]
exchange_rate_returns[1:length(exchange_rate_returns)]
exchange_rate_returns[-1]
exchange_rate_returns[-1] |> head(1)
exchange_rate_returns[1] |> head(1)
exchange_rate_returns <- exchange_rate_returns[-1]
stocks_daily_returns$NEXA <- stocks_daily_returns$NEXA * exchange_rate_returns
stocks_daily_returns
head(converted_returns)
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
# Invest all capital, Shot allowed , minimize standard deviation - Global Minimum Variation Portfolio
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI")
gmvp_ROI
plot(stocks_daily_returns$NEXA)
chart.CumReturns(stocks_daily_returns$NEXA)
plot(`USDBRL=X`)
`USDBRL=X` |. head()
`USDBRL=X` |> head()
exchange_rates
gmvp_ROI
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "long_only") |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI")
gmvp_ROI
library(tidyverse)
library(dplyr)
library(readxl)
library(PerformanceAnalytics)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(PortfolioAnalytics)
library(quantmod)
# Composicao do IBOV no dia 2022-12-29 (investidor monatndo a carteira em janeiro de 2023)
core_ibov_tickers <- readxl::read_excel('COMDINHEIRO_IBOV29122023.xlsx') |>
dplyr::top_n(15,Peso) |>
dplyr::mutate(Ticker = paste(Ticker,'.SA',sep='')) |>
dplyr::pull(Ticker)
charlesRiver <-readxl::read_excel("COMDINHEIRO_carteira_charlesRiverJan2023.xlsx")
colnames(charlesRiver) <- c('ativo','desc','compras','vendas','final','peso')
view(charlesRiver)
not_stocks <- c("Investimento no Exterior",'CONTA CORRENTE NO EXTERIOR','VALORES A PAGAR','VALORES A RECEBER','NTNB_10012018_15082028')
stocks_CR <-  charlesRiver |>
dplyr::filter(ativo %in% not_stocks == FALSE) |>
dplyr::mutate(ativo = ifelse(desc =='Investimento no Exterior',ativo,paste(ativo,".SA",sep='') ) ) |>
dplyr::group_by(ativo) |>
dplyr::summarise(peso=sum(peso))|>
dplyr::top_n(15,peso) |>
dplyr::pull(ativo)
selected_tickers<- stocks_CR
getSymbols(selected_tickers, src = "yahoo", from ='2021-01-01', to='2023-05-31' ) # not run more than one time
start_date <- as.Date('2021-01-01')
end_date <- as.Date('2023-05-31')
getAdjustedClose <- function(symbol) {
getSymbols(symbol, from = start_date, to = end_date)
adjusted_close <- Ad(get(symbol))
return(adjusted_close)
}
# Retrieve Adjusted Close prices for each ticker
adjusted_close_list <- lapply(selected_tickers, getAdjustedClose)
stocks_prices <- do.call(cbind, adjusted_close_list)
colnames(stocks_prices) <- gsub("\\.SA.Adjusted$", "", colnames(stocks_prices))
colnames(stocks_prices) <- gsub("\\.Adjusted$", "", colnames(stocks_prices))
stocks_daily_returns <- stocks_prices |>
PerformanceAnalytics::Return.calculate(method = 'log') |>
na.omit()
chart.CumReturns(stocks_daily_returns$NEXA)
currency_pair <- "USDBRL=X"
getSymbols(currency_pair, src = "yahoo", from = start_date, to = end_date)
exchange_rates <- Cl(get(currency_pair))
exchange_rate_returns <- dailyReturn(exchange_rates, type = "log")
exchange_rate_returns <- exchange_rate_returns[-1]
chart.CumReturns(stocks_daily_returns$NEXA * exchange_rate_returns)
chart.CumReturns(stocks_daily_returns$NEXA)
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
# Invest all capital, Shot allowed , minimize standard deviation - Global Minimum Variation Portfolio
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
add.constraint(type = "long_only") |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI")
gmvp_ROI
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
#add.constraint(type = "long_only") |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI",trace = TRUE)
gmvp_ROI
brl_nexa <- stocks_daily_returns$NEXA * exchange_rate_returns
dol_NEXA <- stocks_daily_returns$NEXA
stocks_daily_returns$NEXA <- brl_nexa
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
# Invest all capital, Shot allowed , minimize standard deviation - Global Minimum Variation Portfolio
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
#add.constraint(type = "long_only") |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI",trace = TRUE)
gmvp_ROI
stocks_daily_returns$NEXA <- dol_NEXA
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
# Invest all capital, Shot allowed , minimize standard deviation - Global Minimum Variation Portfolio
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
#add.constraint(type = "long_only") |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI",trace = TRUE)
gmvp_ROI
extractWeights(gmvp_ROI)
extractWeights(gmvp_ROI) |>sum()
stocks_daily_returns['2021/2022',-c("NEXA")]
stocks_daily_returns$NEXA <- NULL
training_portfolio <- stocks_daily_returns['2021/2022']
validation_portfolio <- stocks_daily_returns['2023']
# Invest all capital, Shot allowed , minimize standard deviation - Global Minimum Variation Portfolio
gmvp_specs <-portfolio.spec(colnames(stocks_daily_returns)) |>
#add.constraint(type = "long_only") |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev",risk_aversion=9999)
gmvp_ROI <- optimize.portfolio(R = training_portfolio,
portfolio = gmvp_specs,
optimize_method = "ROI",trace = TRUE)
extractWeights(gmvp_ROI)
weights_gmv_roi <- extractWeights(gmvp_ROI)
out_sample_gmv_ROI <- Return.portfolio(R = validation_portfolio,
weights = weights_gmv_roi)
charts.PerformanceSummary(out_sample_gmv_ROI,main = "Global Minimun Variation with ROI")
table.AnnualizedReturns(out_sample_gmv_ROI,rf=0.1375)
table.AnnualizedReturns(out_sample_gmv_ROI,Rf=0.1375)
install.packages('plot3D')
install.packages("GA")
install.packages("misc3d")
install.packages('plot3D')
library(parallel)
library(doparallel)
library(doParallel)
install.packages("doParallel")
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(doParallel)
library(tidyverse)
library(quantmod)
library(parallel)
library(plot3D)
library(readxl)
library(dplyr)
library(GA)
# Define the objective function
portfolioObjective <- function(weights) {
portfolioReturn <- sum(weights * colMeans(training_portfolio))
portfolioStdDev <- sqrt(t(weights) %*% cov(training_portfolio) %*% weights)
-portfolioStdDev  # Minimize standard deviation, so negative sign
}
# Define the constraints
portfolioConstraints <- function(weights) {
# Full investment
sum(weights) - 1
}
# Set up the GA optimization
gaResult <- ga(type = "real-valued",
fitness = portfolioObjective, #objective
lower = rep(-1, ncol(training_portfolio)),  # Lower bounds for weights (allow negative)
upper = rep(1, ncol(training_portfolio)),  # Upper bounds for weights,
constraint = portfolioConstraints, #constrains
popSize = 100,  # Population size
maxiter = 5000,  # Maximum number of iterations
pmutation = 0.1, # default mutation rate
elitism = max(1, round(50*0.05)), # default - 5% popSize
run = 100,  # Number of runs
parallel = TRUE, # parallel processing
monitor = TRUE, # print the evolutions
seed = 42)  # Set a seed for reproducibility
help(ga)
gaResult <- ga(type = "real-valued",
fitness = portfolioObjective, #objective
lower = rep(-1, ncol(training_portfolio)),  # Lower bounds for weights (allow negative)
upper = rep(1, ncol(training_portfolio)),  # Upper bounds for weights,
popSize = 100,  # Population size
maxiter = 5000,  # Maximum number of iterations
pmutation = 0.1, # default mutation rate
elitism = max(1, round(50*0.05)), # default - 5% popSize
run = 100,  # Number of runs
parallel = TRUE, # parallel processing
monitor = TRUE, # print the evolutions
seed = 42)  # Set a seed for reproducibility
# Apresentar resultados principais:
summary(gaResult)
as.vector(summary(ga_res)$solution)
as.vector(summary(gaResult)$solution)
typeof(weights_gmv_roi)
class(weights_gmv_roi)
str(weights_gmv_roi)
as.vector(summary(gaResult)$solution)
gmv_GA <- as.vector(summary(gaResult)$solution)
sum(gmv_GA)
weights_gmv_roi
weights_gmv_GA <- as.vector(summary(gaResult)$solution)
weights_gmv_GA
sum(weights_gmv_GA)
# Genetic Algorithms
# Constrains
constraint = function(weights) {
boundary_constr = (sum(weights)-1)**2   # "sum x = 1" constraint
return (boundary_constr)
}
# Define the objective function
portfolioObjective <- function(weights) {
portfolioReturn <- sum(weights * colMeans(training_portfolio))
portfolioStdDev <- sqrt(t(weights) %*% cov(training_portfolio) %*% weights)
return(-portfolioStdDev + 100 * constraint(weights))  # Minimize standard deviation, so negative sign
}
# Set up the GA optimization
gaResult <- ga(type = "real-valued",
fitness = portfolioObjective, #objective
lower = rep(-1, ncol(training_portfolio)),  # Lower bounds for weights (allow negative)
upper = rep(1, ncol(training_portfolio)),  # Upper bounds for weights,
popSize = 100,  # Population size
maxiter = 5000,  # Maximum number of iterations
pmutation = 0.1, # default mutation rate
elitism = max(1, round(50*0.05)), # default - 5% popSize
run = 100,  # Number of runs
parallel = TRUE, # parallel processing
monitor = TRUE, # print the evolutions
seed = 42)  # Set a seed for reproducibility
# Apresentar resultados principais:
summary(gaResult)
sum(as.vector(summary(gaResult)$solution))
# Genetic Algorithms
# Constrains
constraint = function(weights) {
boundary_constr = (sum(weights)-1)**2   # "sum x = 1" constraint
return (boundary_constr)
}
# Define the objective function
portfolioObjective <- function(weights) {
portfolioReturn <- sum(weights * colMeans(training_portfolio))
portfolioStdDev <- sqrt(t(weights) %*% cov(training_portfolio) %*% weights)
return(-portfolioStdDev - 100 * constraint(weights))  # Minimize standard deviation, so negative sign
}
# Set up the GA optimization
gaResult <- ga(type = "real-valued",
fitness = portfolioObjective, #objective
lower = rep(-1, ncol(training_portfolio)),  # Lower bounds for weights (allow negative)
upper = rep(1, ncol(training_portfolio)),  # Upper bounds for weights,
popSize = 100,  # Population size
maxiter = 5000,  # Maximum number of iterations
pmutation = 0.1, # default mutation rate
elitism = max(1, round(50*0.05)), # default - 5% popSize
run = 100,  # Number of runs
parallel = TRUE, # parallel processing
monitor = TRUE, # print the evolutions
seed = 42)  # Set a seed for reproducibility
# Apresentar resultados principais:
summary(gaResult)
weights_gmv_GA <- as.vector(summary(gaResult)$solution)
sum(weights_gmv_GA)
sum(weights_gmv_GA)
weights_gmv_GA
as.data.frame(weights_gmv_GA)
names(weights_gmv_GA)
names(weights_gmv_GA) <- colnames(stocks_daily_returns)
weights_gmv_GA
out_sample_gmv_GA <- Return.portfolio(R = validation_portfolio,
weights = weights_gmv_GA)
charts.PerformanceSummary(out_sample_gmv_GA,main = "Global Minimun Variation with ROI")
table.AnnualizedReturns(out_sample_gmv_GA,Rf=0.1375)
table.AnnualizedReturns(out_sample_gmv_ROI,Rf=0.1375)
(1 + 0.1275)^(1/252) - 1
table.AnnualizedReturns(out_sample_gmv_ROI,Rf=0.000476315)
(1 + 0.1365)^(1/252) - 1
daily_cdi <- (1 + 0.1365)^(1/252) - 1
performance_gmv_ROI <- table.AnnualizedReturns(out_sample_gmv_ROI,Rf=daily_cdi <- (1 + 0.1365)^(1/252) - 1)
performance_gmv_GA <- table.AnnualizedReturns(out_sample_gmv_GA,Rf=daily_cdi)
performance_gmv_GA
kpis_gmv_ROI <- table.AnnualizedReturns(out_sample_gmv_ROI,Rf=daily_cdi)
cbind(kpis_gmv_GA,kpis_gmv_ROI)
kpis_gmv_GA <- table.AnnualizedReturns(out_sample_gmv_GA,Rf=daily_cdi)
cbind(kpis_gmv_GA,kpis_gmv_ROI)
kpis_compariosn <- cbind(kpis_gmv_GA,kpis_gmv_ROI)
kpis_compariosn <- cbind(kpis_gmv_GA,kpis_gmv_ROI)
colnames(kpis_compariosn) <- c("GA","Gradient")
kpis_compariosn
kpis_comparison <- cbind(kpis_gmv_GA,kpis_gmv_ROI)
colnames(kpis_comparison) <- c("GA","Gradient")
kpis_comparison <- cbind(kpis_gmv_GA,kpis_gmv_ROI)
colnames(kpis_comparison) <- c("GA","ROI_Gradient")
comparison_daily_returns <- cbind(out_sample_gmv_GA,out_sample_gmv_ROI)
colnames(comparison_daily_returns) <- c("GA","ROI_Gradient")
comparison_daily_returns
PerformanceAnalytics::charts.PerformanceSummary(comparison_daily_returns, colorset=rich6equal,
lwd=2, cex.legend = 1.0, event.labels = TRUE, main = "")
